<!DOCTYPE html>
<html>
<head>
    <title>Basketball Game</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #eee;
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        canvas {
            background: #87ceeb; /* Sky blue background */
            display: block;
            margin: 0 auto;
            border: 2px solid #333;
            border-radius: 10px;
        }
        #gameInfo {
            text-align: center;
            font-size: 24px;
            margin: 20px;
            color: #333;
        }
        #pauseMenu {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
        }
        #pauseMenu button {
            margin: 10px;
            padding: 10px 20px;
            font-size: 18px;
            border: none;
            border-radius: 5px;
            background-color: #555;
            color: white;
            cursor: pointer;
        }
        #pauseMenu button:hover {
            background-color: #777;
        }
    </style>
</head>
<body>
    <div id="gameInfo">
        <span id="levelIndicator">Level: 1</span> | 
        <span id="scoreIndicator">Score: 0</span>
        <br>
        <button id="pauseButton">Pause</button>
    </div>
    <canvas id="gameCanvas"></canvas>
    <div id="pauseMenu">
        <h2>Game Paused</h2>
        <button id="resumeButton">Resume</button>
        <button id="goBackButton">Go Back Level</button>
        <button id="restartButton">Restart Game</button>
    </div>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const gravity = 0.1;
        const bouncePower = 12;
        const ballColor = '#ff8c00';
        let hoops = [];
        let ball = { x: canvas.width / 2, y: canvas.height / 2, radius: 20, dx: 0, dy: 0, maxSpeed: 6 };
        let currentLevel = 1;
        const maxLevel = 100;
        let isPaused = false;
        let score = 0;
        let levelIndicator = document.getElementById('levelIndicator');
        let scoreIndicator = document.getElementById('scoreIndicator');
        const pauseMenu = document.getElementById('pauseMenu');
        let inputBuffer = '';
        let touchStartX, touchStartY;

        // Load sound
        const hoopSound = new Audio('hoop-sound.mp3');
        const bgMusic = new Audio('background-music.mp3');
        bgMusic.loop = true;
        bgMusic.play();

        function resizeCanvas() {
            canvas.width = window.innerWidth * 0.9;
            canvas.height = window.innerHeight * 0.7;
            ball.x = canvas.width / 2;
            ball.y = canvas.height / 2;
            generateLevel(currentLevel);
        }

        function generateLevel(level) {
            hoops = [];
            for (let i = 0; i < 10; i++) {
                hoops.push({
                    x: Math.random() * (canvas.width - 50) + 25,
                    y: Math.random() * (canvas.height / 2 - 50) + 25,
                    radius: 25
                });
            }
            levelIndicator.textContent = `Level: ${level}`;
            score = 0; // Reset score at the start of each level
            scoreIndicator.textContent = `Score: ${score}`;
        }

        function drawBall() {
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fillStyle = ballColor;
            ctx.fill();
            ctx.strokeStyle = '#000';
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.closePath();
        }

        function drawHoops() {
            hoops.forEach(hoop => {
                ctx.beginPath();
                ctx.arc(hoop.x, hoop.y, hoop.radius, 0, Math.PI * 2);
                ctx.strokeStyle = '#ff0000';
                ctx.lineWidth = 4;
                ctx.stroke();
                ctx.closePath();
            });
        }

        function updateBall() {
            ball.dy += gravity;
            ball.x += ball.dx;
            ball.y += ball.dy;

            if (Math.abs(ball.dx) > ball.maxSpeed) ball.dx = ball.maxSpeed * Math.sign(ball.dx);
            if (Math.abs(ball.dy) > ball.maxSpeed) ball.dy = ball.maxSpeed * Math.sign(ball.dy);

            if (ball.y + ball.radius > canvas.height) {
                ball.dy = -ball.dy * 0.7;
                ball.y = canvas.height - ball.radius;
                resetGame();
            }

            if (ball.y - ball.radius < 0) {
                ball.dy = -ball.dy * 0.7;
                ball.y = ball.radius;
                resetGame();
            }

            if (ball.x + ball.radius > canvas.width) {
                ball.dx = -ball.dx * 0.7;
                ball.x = canvas.width - ball.radius;
            }

            if (ball.x - ball.radius < 0) {
                ball.dx = -ball.dx * 0.7;
                ball.x = ball.radius;
            }

            hoops.forEach((hoop, index) => {
                const distX = Math.abs(ball.x - hoop.x);
                const distY = Math.abs(ball.y - hoop.y);
                if (distX < hoop.radius && distY < hoop.radius) {
                    hoopSound.play();
                    hoops.splice(index, 1);
                    score += 10; // Increment score for each hoop
                    scoreIndicator.textContent = `Score: ${score}`;
                }
            });

            if (hoops.length === 0) {
                currentLevel++;
                if (currentLevel > maxLevel) {
                    alert('Good job, you finally won!');
                    resetGame();
                } else {
                    generateLevel(currentLevel);
                }
            }
        }

        function draw() {
            if (!isPaused) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                drawBall();
                drawHoops();
                updateBall();
            }
        }

        function pauseGame() {
            isPaused = true;
            pauseMenu.style.display = 'block';
            bgMusic.pause(); // Pause background music
        }

        function resumeGame() {
            isPaused = false;
            pauseMenu.style.display = 'none';
            bgMusic.play(); // Resume background music
        }

        function goBackLevel() {
            if (currentLevel > 1) {
                currentLevel--;
                generateLevel(currentLevel);
            }
        }

        function restartGame() {
            resetGame();
            resumeGame();
        }

        function resetGame() {
            currentLevel = 1;
            generateLevel(currentLevel);
            ball = { x: canvas.width / 2, y: canvas.height / 2, radius: 20, dx: 0, dy: 0, maxSpeed: 6 };
        }

        function handleKeyPress(event) {
            if (event.code === 'KeyW') {
                ball.dy -= bouncePower;
            } else if (event.code === 'KeyA') {
                ball.dx -= 2;
            } else if (event.code === 'KeyD') {
                ball.dx += 2;
            } else if (event.code === 'KeyS') {
                ball.dy += 2;
            } else {
                inputBuffer += event.key;
                if (inputBuffer.endsWith('sigma')) {
                    currentLevel++;
                    if (currentLevel > maxLevel) {
                        alert('Good job, you finally won!');
                        resetGame();
                    } else {
                        generateLevel(currentLevel);
                    }
                    inputBuffer = '';
                }
            }
        }

        function handleTouchStart(event) {
            touchStartX = event.touches[0].clientX;
            touchStartY = event.touches[0].clientY;
        }

        function handleTouchMove(event) {
            if (!touchStartX || !touchStartY) return;

            const touchEndX = event.touches[0].clientX;
            const touchEndY = event.touches[0].clientY;
            const deltaX = touchEndX - touchStartX;
            const deltaY = touchEndY - touchStartY;

            const threshold = 30; // Minimum swipe distance

            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                if (deltaX > threshold) {
                    ball.dx += 2; // Swipe right
                } else if (deltaX < -threshold) {
                    ball.dx -= 2; // Swipe left
                }
            } else {
                if (deltaY > threshold) {
                    ball.dy += 2; // Swipe down
                } else if (deltaY < -threshold) {
                    ball.dy -= bouncePower; // Swipe
                 Up
                 }
                 }

        touchStartX = event.touches[0].clientX;
        touchStartY = event.touches[0].clientY;

        event.preventDefault();
    }

    // Add event listeners
    document.addEventListener('keydown', handleKeyPress);
    document.addEventListener('touchstart', handleTouchStart);
    document.addEventListener('touchmove', handleTouchMove);

    document.getElementById('pauseButton').addEventListener('click', pauseGame);
    document.getElementById('resumeButton').addEventListener('click', resumeGame);
    document.getElementById('goBackButton').addEventListener('click', goBackLevel);
    document.getElementById('restartButton').addEventListener('click', restartGame);

    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    setInterval(draw, 16);
</script> </body>
</html>
```